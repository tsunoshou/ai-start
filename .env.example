# ===============================================================
# AiStart アプリケーション環境変数設定ファイル
# ===============================================================
# このファイルは環境変数のテンプレートです。
# 実際の設定は .env.local にコピーして行ってください。
# .env.local はgitリポジトリに含まれません。
# ===============================================================

# ==== 基本設定 ====
# NODE_ENV: Node.jsの実行環境を指定
#   - development: 開発時に使用。デバッグ情報の出力やホットリロードが有効
#   - test: テスト実行時に使用。テスト用DBの使用などが自動的に設定される
#   - production: 本番環境用。最適化とキャッシュが有効
NODE_ENV=development

# APP_ENV: アプリケーション固有の環境設定
#   - development: ローカル開発環境（デフォルト）
#   - staging: ステージング環境（リリース前検証用）
#   - production: 本番環境
# 注意: この変数はデータベース接続先などの環境分離に使用されます
APP_ENV=development

# NEXT_PUBLIC_APP_URL: アプリケーションのベースURL
#   - ローカル開発時: http://localhost:3000
#   - ステージング環境: https://staging.ai-start.net
#   - 本番環境: https://ai-start.net
# 注意: この値はフロントエンドでも参照されるため NEXT_PUBLIC_ プレフィックスが必要
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ==== データベース接続設定 ====
# DATABASE_URL: 現在の環境（APP_ENV）に対応するデータベース接続文字列
# 形式: postgres://username:password@host:port/database
# 注意: 
#   - 実際の値を設定する際はパスワードに特殊文字が含まれる場合はURLエンコードが必要
#   - Supabaseを使用する場合、ダッシュボード > Settings > Database から接続情報を取得できます
DATABASE_URL=postgres://username:password@localhost:5432/ai-start-dev

# 環境別データベース設定（マイグレーションコマンドで使用）
# これらの変数はマイグレーションスクリプトで参照され、環境ごとに適切なDBに接続します
# package.jsonに定義されたマイグレーションコマンド（db:migrate:dev, db:migrate:staging, db:migrate:prod）で使用
DATABASE_URL_DEVELOPMENT=postgres://username:password@localhost:5432/ai-start-dev
DATABASE_URL_STAGING=postgres://username:password@localhost:5432/ai-start-staging
DATABASE_URL_PRODUCTION=postgres://username:password@localhost:5432/ai-start

# ==== Supabase設定 ====
# 現在の環境（APP_ENV）に対応するSupabase設定
# 取得方法: Supabaseダッシュボード > Project Settings > API
# NEXT_PUBLIC_SUPABASE_URL: SupabaseプロジェクトのURL
# NEXT_PUBLIC_SUPABASE_ANON_KEY: 匿名認証用の公開キー（フロントエンドで使用）
# SUPABASE_SERVICE_ROLE_KEY: バックエンド処理用の管理者権限キー（絶対に公開しないこと）
NEXT_PUBLIC_SUPABASE_URL=https://xxxxx.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# 環境別Supabase設定（オプション）
# これらの変数は環境切替時に使用されます。環境ごとに別々のSupabaseプロジェクトを使う場合に設定
# API Routes等のサーバーサイドコードでは APP_ENV に基づいて適切な環境の接続情報が選択されます

# 開発環境のSupabase設定
NEXT_PUBLIC_SUPABASE_URL_DEVELOPMENT=https://example-dev.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY_DEVELOPMENT=your-dev-anon-key
SUPABASE_SERVICE_ROLE_KEY_DEVELOPMENT=your-dev-service-role-key

# ステージング環境のSupabase設定
# NEXT_PUBLIC_SUPABASE_URL_STAGING=https://example-staging.supabase.co
# NEXT_PUBLIC_SUPABASE_ANON_KEY_STAGING=your-staging-anon-key
# SUPABASE_SERVICE_ROLE_KEY_STAGING=your-staging-service-role-key

# 本番環境のSupabase設定
# NEXT_PUBLIC_SUPABASE_URL_PRODUCTION=https://example-prod.supabase.co
# NEXT_PUBLIC_SUPABASE_ANON_KEY_PRODUCTION=your-prod-anon-key
# SUPABASE_SERVICE_ROLE_KEY_PRODUCTION=your-prod-service-role-key

# ==== 認証設定 ====
# AUTH_SECRET: 認証トークンの暗号化やセッション管理に使用する秘密鍵
#   開発環境では任意の複雑な文字列でOK、本番環境では強力な乱数生成を推奨
#   生成方法: openssl rand -base64 32
# AUTH_URL: 認証関連のコールバックに使用されるベースURL（通常はアプリのURL）
AUTH_SECRET=your-auth-secret
AUTH_URL=http://localhost:3000

# ==== 国際化設定 ====
# DEFAULT_LOCALE: デフォルトのロケール（ユーザー設定がない場合に使用）
# SUPPORTED_LOCALES: サポートする言語のリスト（カンマ区切り）
DEFAULT_LOCALE=ja
SUPPORTED_LOCALES=ja,en

# ==== OAuth設定（省略可能） ====
# 各種OAuthプロバイダーとの連携に必要な認証情報
# Google OAuth:
#   取得方法: Google Cloud Console > 認証情報 > OAuth 2.0 クライアント ID
# GOOGLE_CLIENT_ID=your-google-client-id
# GOOGLE_CLIENT_SECRET=your-google-client-secret

# GitHub OAuth:
#   取得方法: GitHub > Settings > Developer settings > OAuth Apps
# GITHUB_CLIENT_ID=your-github-client-id
# GITHUB_CLIENT_SECRET=your-github-client-secret

# ==== AI設定（省略可能） ====
# 各種AI APIとの連携に必要なAPIキー
# OpenAI API: GPT-4o等のモデルを使用する場合に設定
#   取得方法: OpenAI Platform > API keys
# OPENAI_API_KEY=your-openai-api-key

# Anthropic API: Claude 3等のモデルを使用する場合に設定
#   取得方法: Anthropic Console > API Keys
# ANTHROPIC_API_KEY=your-anthropic-api-key

# Google Gemini API: Geminiモデルを使用する場合に設定
#   取得方法: Google AI Studio > API Keys
# GEMINI_API_KEY=your-gemini-api-key

# ==== ストレージ設定（省略可能） ====
# Vercel Blob Storage: ファイルアップロード機能を使用する場合に設定
#   取得方法: Vercel Dashboard > Storage > Blob > Create Token
# BLOB_READ_WRITE_TOKEN=your-vercel-blob-token

# ==== ログ設定 ====
# LOG_LEVEL: アプリケーションのログレベル
#   - debug: 最も詳細なログ（開発時のみ推奨）
#   - info: 一般的な情報ログ（デフォルト）
#   - warn: 警告以上のログ
#   - error: エラーのみを記録
LOG_LEVEL=info

# ==== Vercel連携設定 ====
# 以下の変数はVercelプラットフォームが自動的に設定するため、
# 手動で設定する必要はありません。参考情報として記載しています。
# 
# VERCEL_URL: デプロイされたアプリケーションのURL
# VERCEL_ENV: Vercelの環境変数（development/preview/production） 