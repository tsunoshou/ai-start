name: CI

on:
  pull_request:
    branches: [main, development, 'release/*']
  push:
    branches: [main, development, 'release/*']
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  lint-and-test:
    name: 型チェック・コードスタイル・テスト
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 依存関係インストール
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps # VitestのStorybookテストでPlaywrightを使うため追加

      - name: コード形式チェック
        run: npm run format:check

      - name: Lint実行
        run: npm run lint

      - name: 型チェック
        run: npx tsc --noEmit

      - name: ユニット/統合テスト実行
        run: npm run test:unit # Vitestを実行

      - name: mainブランチへのPRソースブランチ検証
        # mainブランチへのプルリクエストの場合のみ実行
        if: github.event_name == 'pull_request' && github.base_ref == 'main'
        run: |
          SOURCE_BRANCH="${{ github.head_ref }}"
          # ソースブランチが release/* または hotfix/* パターンにマッチするかチェック
          if [[ "$SOURCE_BRANCH" =~ ^release/.*$ ]] || [[ "$SOURCE_BRANCH" =~ ^hotfix/.*$ ]]; then
            echo "✅ Source branch '$SOURCE_BRANCH' is allowed for merging into main."
            exit 0
          else
            echo "❌ ERROR: Merging into 'main' is only allowed from 'release/*' or 'hotfix/*' branches."
            echo "Source branch '$SOURCE_BRANCH' is not allowed."
            exit 1
          fi

  e2e-test:
    name: E2Eテスト
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    needs: lint-and-test # lint-and-test ジョブの成功後に実行
    environment: staging
    runs-on: ubuntu-latest
    timeout-minutes: 15 # E2Eテストは時間がかかる可能性があるため長めに設定

    steps:
      - uses: actions/checkout@v4

      - name: Node.jsセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 依存関係インストール
        run: npm ci

      - name: Playwright ブラウザのインストール
        run: npx playwright install --with-deps # 依存関係も含めてブラウザをインストール

      - name: アプリケーションのビルド
        run: npm run build # E2Eテスト前にビルドが必要
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }} # staging 用の URL を Secret に設定

      - name: E2Eテスト実行
        run: npm run test:e2e
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }} # staging 用の URL を Secret に設定
          PLAYWRIGHT_BASE_URL: 'http://localhost:3000' # ローカルサーバーを使う想定のため、多くの場合変更不要

      # オプション: Playwrightレポートのアップロード
      - uses: actions/upload-artifact@v4
        if: always() # テストが失敗してもレポートをアップロード
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # セキュリティスキャンのみ残す（ビルドはVercelに任せる）
  security-scan:
    name: セキュリティチェック
    runs-on: ubuntu-latest
    needs: lint-and-test # lint-and-test後に実行
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: 依存関係インストール
        run: npm ci

      - name: セキュリティ監査実行
        run: npm audit --production || true # エラーがあっても続行

# ビルドはVercelで自動的に行われるためコメントアウト
# ビルドのチェックだけ行いたい場合は残してください
#  build-check:
#    name: ビルド確認
#    runs-on: ubuntu-latest
#    needs: lint-and-test
#    timeout-minutes: 5
#    steps:
#      - uses: actions/checkout@v4
#      - name: Node.jsセットアップ
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20.x'
#          cache: 'npm'
#      - name: 依存関係インストール
#        run: npm ci
#      - name: ビルドチェック
#        run: npm run build
#        env:
#          SKIP_DB_TEST: 'true'
